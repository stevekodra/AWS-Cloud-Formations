AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates 2 Windows Server instances into private subnets in separate Availability Zones inside a VPC. After extending your on-premises
  network to the VPC, you can promote the Windows Server instances to Domain Controllers in your AD forest. Or optionally you can choose to have automation join and promote them to an existing domain.
  **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1qup6radg)
Metadata:
  QuickStartDocumentation:
    EntrypointName: 'Parameters for extending on-premises AD into an existing VPC'
    Order: '4'
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCCIDR
          - VPCID
          - Subnet1ID
          - Subnet2ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - ADServerInstanceType
          - ADServer1NetBIOSName
          - ADServer1PrivateIP
          - ADServer2NetBIOSName
          - ADServer2PrivateIP
          - DataDriveSizeGiB
          - KeyPairName
          - LatestAmiId
      - Label:
          default: Microsoft Active Directory Domain Services configuration
        Parameters:
          - JoinAndPromote
          - AdministratorSecret
          - RestoreModeSecret
          - ExistingDomainController1IP
          - ExistingDomainController2IP
          - DomainDNSName
          - DomainNetBIOSName
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      ADServer1NetBIOSName:
        default: Domain Controller 1 NetBIOS Name
      ADServer1PrivateIP:
        default: Domain Controller 1 Private IP Address
      ADServer2NetBIOSName:
        default: Domain Controller 2 NetBIOS Name
      ADServer2PrivateIP:
        default: Domain Controller 2 Private IP Address
      ADServerInstanceType:
        default: Domain Controllers Instance Type
      AdministratorSecret:
        default: Secret ARN Containing Administrator Credentials
      DataDriveSizeGiB:
        default: SYSVOL and NTDS and Data Drive Size
      DomainDNSName:
        default: Domain DNS Name
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      ExistingDomainController1IP:
        default: IP used for DNS (Must be accessible)
      ExistingDomainController2IP:
        default: IP used for DNS (Must be accessible)
      JoinAndPromote:
        default: Join and Promote to Domain Controllers
      KeyPairName:
        default: Key Pair Name
      LatestAmiId:
        default: SSM Parameter Value for latest AMI ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      RestoreModeSecret:
        default: Secret ARN Containing Restore Mode Credentials
      Subnet1ID:
        default: Subnet 1 ID
      Subnet2ID:
        default: Subnet 2 ID
      VPCCIDR:
        default: VPC CIDR
      VPCID:
        default: VPC ID
Parameters:
  ADServer1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC3
    Description: NetBIOS name of the first additional Active Directory Domain Controller (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer1PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.11
    Description: Fixed private IP for the first additional Active Directory Domain Controller located in subnet 1
    Type: String
  ADServer2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC4
    Description: NetBIOS name of the second additional Active Directory Domain Controller (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer2PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.11
    Description: Fixed private IP for the second additional Active Directory Domain Controller located in subnet 2
    Type: String
  ADServerInstanceType:
    AllowedValues:
      - t2.medium
      - t3.medium
      - t2.large
      - t3.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.large
    Description: Amazon EC2 instance type for Active Directory Controller instances
    Type: String
  AdministratorSecret:
    Default: arn:aws:secretsmanager:us-east-1:############:secret:admin-creds-example
    Description: ARN for the Administrator credentials Secret used to join and promote domain controllers (Only used if JoinAndPromote is Yes)
    Type: String
  DataDriveSizeGiB:
    Default: '10'
    Description: Size of SYSVOL and NTDS data drive in GiB
    Type: Number
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the domain you would like to join and promote to e.g. example.com
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: NetBIOS name of the domain (up to 15 characters) you would like to join and promote to for users of earlier versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ExistingDomainController1IP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.10
    Description: IP of DNS server that can resolve domain (Must be accessible)
    Type: String
  ExistingDomainController2IP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.10
    Description: IP of DNS server that can resolve domain (Must be accessible)
    Type: String
  JoinAndPromote:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Do you want to join and promote these instances to be Active Directory Domain Controllers
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: S3 bucket name for CA CRL storage. Bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)
    Default: quickstart-microsoft-activedirectory/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)
    Type: String
  RestoreModeSecret:
    Default: arn:aws:secretsmanager:us-east-1:############:secret:restore-creds-example
    Description: ARN for the Restore Mode credentials Secret used to join and promote domain controllers (Only used if JoinAndPromote is Yes)
    Type: String
  Subnet1ID:
    Description: ID of subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  Subnet2ID:
    Description: ID of subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
  SecretValidation:
    RuleCondition: !Equals [!Ref JoinAndPromote, 'Yes']
    Assertions:
      - AssertDescription: The Administrator Secret must be valid
        Assert: !Not [!Equals [!Ref AdministratorSecret, 'arn:aws:secretsmanager:us-east-1:############:secret:admin-creds-example']]
      - AssertDescription: The Restore Mode Secret must be valid
        Assert: !Not [!Equals [!Ref RestoreModeSecret, 'arn:aws:secretsmanager:us-east-1:############:secret:restore-creds-example']]
Conditions:
  DoJoinAndPromote: !Equals [!Ref JoinAndPromote, 'Yes']
  DoNOTJoinAndPromote: !Equals [!Ref JoinAndPromote, 'No']
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Resources:
  AWSQuickstartActiveDirectoryDS:
    Condition: DoNOTJoinAndPromote
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      Content:
        schemaVersion: '0.3'
        description: 'Deploy non-promoted domain contollers with SSM Automation'
        # Gathering parameters needed to configure DCs in the Quick Start
        parameters:
          VPCCIDR:
            default: '10.0.0.0/16'
            description: 'CIDR Block for the VPC'
            type: 'String'
          ADServer1NetBIOSName:
            default: 'DC1'
            description: 'NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)'
            type: 'String'
          ADServer2NetBIOSName:
            default: 'DC2'
            description: 'NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)'
            type: 'String'
          ExistingDomainController1IP:
            description: 'IP of DNS server that can resolve domain (Must be accessible)'
            type: 'String'
          ExistingDomainController2IP:
            description: 'IP of DNS server that can resolve domain (Must be accessible)'
            type: 'String'
          DomainDNSName:
            default: 'example.com'
            description: 'Fully qualified domain name (FQDN) of the domain you would like to join and promote to e.g. example.com'
            type: 'String'
          DomainNetBIOSName:
            default: 'example'
            description:
              'NetBIOS name of the domain (up to 15 characters) you would like to join and promote to for users of earlier versions of Windows e.g.
              EXAMPLE'
            type: 'String'
          QSS3BucketName:
            default: 'aws-quickstart'
            description:
              'S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and
              hyphens (-). It cannot start or end with a hyphen (-)'
            type: 'String'
          QSS3BucketRegion:
            default: 'us-east-1'
            description:
              'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value'
            type: 'String'
          QSS3KeyPrefix:
            default: 'quickstart-microsoft-activedirectory/'
            description:
              'S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens
              (-), and forward slash (/)'
            type: 'String'
          StackName:
            default: ''
            description: 'Stack Name Input for cfn resource signal'
            type: 'String'
          URLSuffix:
            default: 'amazonaws.com'
            description: 'AWS URL suffix'
            type: 'String'
        mainSteps:
          # This step grabs the Instance IDs for both nodes that will be configured as DCs in the Quick Start and Instance IDs for the for next steps.
          - name: 'dcsInstanceIds'
            action: aws:executeAwsApi
            onFailure: 'step:signalfailure'
            nextStep: 'dc1InstanceId'
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Name'
                  Values: ['{{ADServer1NetBIOSName}}', '{{ADServer2NetBIOSName}}']
                - Name: 'tag:aws:cloudformation:stack-name'
                  Values: ['{{StackName}}']
                - Name: 'instance-state-name'
                  Values: ['running']
            outputs:
              - Name: InstanceIds
                Selector: '$.Reservations..Instances..InstanceId'
                Type: 'StringList'
          # This step grabs the Instance ID for the node that will be configured as the first DC in the new domain.
          - name: 'dc1InstanceId'
            action: aws:executeAwsApi
            onFailure: 'step:signalfailure'
            nextStep: 'dc2InstanceId'
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Name'
                  Values: ['{{ADServer1NetBIOSName}}']
                - Name: 'tag:aws:cloudformation:stack-name'
                  Values: ['{{StackName}}']
                - Name: 'instance-state-name'
                  Values: ['running']
            outputs:
              - Name: InstanceId
                Selector: '$.Reservations[0].Instances[0].InstanceId'
                Type: 'String'
          # This step grabs the Instance ID for the node that will be configured as the second DC in the new domain.
          - name: 'dc2InstanceId'
            action: aws:executeAwsApi
            onFailure: 'step:signalfailure'
            nextStep: 'dcsInstallDscModules'
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Name'
                  Values: ['{{ADServer2NetBIOSName}}']
                - Name: 'tag:aws:cloudformation:stack-name'
                  Values: ['{{StackName}}']
                - Name: 'instance-state-name'
                  Values: ['running']
            outputs:
              - Name: InstanceId
                Selector: '$.Reservations[0].Instances[0].InstanceId'
                Type: 'String'
          # Installs needed Powershell DSC Modules and components on both nodes.
          - name: 'dcsInstallDscModules'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dcsLCMConfig'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dcsInstanceIds.InstanceIds}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/install-ad-modules.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine: './install-ad-modules.ps1'
          # Configures Local Configuration Manager on each of the nodes.
          - name: 'dcsLCMConfig'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dc1createDCMof'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dcsInstanceIds.InstanceIds}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/LCM-Config.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine: './LCM-Config.ps1'
          # Generates MOF file on second DC Node to be processed by LCM.
          - name: 'dc1createDCMof'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dc1configDC'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dc1InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/AD2-NonPromoConfig.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine:
                  './AD2-NonPromoConfig.ps1 -ADServerNetBIOSName {{ADServer1NetBIOSName}} -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName
                  {{DomainDNSName}} -ADServer1PrivateIP {{ExistingDomainController1IP}} -ADServer2PrivateIP {{ExistingDomainController2IP}}'
          # Kicks off DSC Configuration and loops\reboots until Node matches Configuration defined in MOF file.
          - name: 'dc1configDC'
            action: aws:runCommand
            onFailure: 'step:signalfailure'
            nextStep: 'dc2createDCMof'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{dc1InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                commands:
                  - |
                    function DscStatusCheck () {
                        $LCMState = (Get-DscLocalConfigurationManager).LCMState
                        if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                            'returning 3010, should continue after reboot'
                            exit 3010
                        } else {
                            'Completed'
                        }
                    }

                    Start-DscConfiguration 'C:\AWSQuickstart\NonPromoConfig' -Wait -Verbose -Force

                    DscStatusCheck
          # Generates MOF file on second DC Node to be processed by LCM.
          - name: 'dc2createDCMof'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dc2configDC'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dc2InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/AD2-NonPromoConfig.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine:
                  './AD2-NonPromoConfig.ps1 -ADServerNetBIOSName {{ADServer2NetBIOSName}} -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName
                  {{DomainDNSName}} -ADServer1PrivateIP {{ExistingDomainController1IP}} -ADServer2PrivateIP {{ExistingDomainController2IP}}'
          # Kicks off DSC Configuration and loops\reboots until Node matches Configuration defined in MOF file.
          - name: 'dc2configDC'
            action: aws:runCommand
            onFailure: 'step:signalfailure'
            nextStep: 'PostConfig'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{dc2InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                commands:
                  - |
                    function DscStatusCheck () {
                        $LCMState = (Get-DscLocalConfigurationManager).LCMState
                        if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                            'returning 3010, should continue after reboot'
                            exit 3010
                        } else {
                            'Completed'
                        }
                    }

                    Start-DscConfiguration 'C:\AWSQuickstart\NonPromoConfig' -Wait -Verbose -Force

                    DscStatusCheck
          # Cleanup and finalize setup
          - name: 'PostConfig'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dcsInstanceIds.InstanceIds}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: S3
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/AD2-Post-Config.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine: './AD2-Post-Config.ps1 -VPCCIDR {{VPCCIDR}}'
          # Determines if CFN Needs to be Signaled or if Work flow should just end
          - name: 'CFNSignalEnd'
            action: aws:branch
            inputs:
              Choices:
                - NextStep: signalsuccess
                  Not:
                    Variable: '{{StackName}}'
                    StringEquals: ''
                - NextStep: sleepend
                  Variable: '{{StackName}}'
                  StringEquals: ''
          # If all steps complete successfully signals CFN of Success
          - name: 'signalsuccess'
            action: 'aws:executeAwsApi'
            isEnd: True
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: 'DomainController2'
              StackName: '{{StackName}}'
              Status: SUCCESS
              UniqueId: '{{dc2InstanceId.InstanceId}}'
          # If CFN Signl Not Needed this sleep ends work flow
          - name: 'sleepend'
            action: 'aws:sleep'
            isEnd: True
            inputs:
              Duration: PT1S
          # If any steps fails signals CFN of Failure
          - name: 'signalfailure'
            action: 'aws:executeAwsApi'
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: 'DomainController2'
              StackName: '{{StackName}}'
              Status: FAILURE
              UniqueId: '{{dc2InstanceId.InstanceId}}'
  AWSQuickstartActiveDirectoryDSPromote:
    Condition: DoJoinAndPromote
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      Content:
        schemaVersion: '0.3'
        description: 'Deploy promoted domain contollers with SSM Automation'
        # Gathering parameters needed to configure DCs in the Quick Start
        parameters:
          VPCCIDR:
            default: '10.0.0.0/16'
            description: 'CIDR block for private subnet 1 located in Availability Zone 1'
            type: 'String'
          ADServer1NetBIOSName:
            default: 'DC1'
            description: 'NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)'
            type: 'String'
          ADServer1PrivateIP:
            default: '10.0.0.11'
            description: 'Fixed private IP for the first additional Active Directory Domain Controller located in subnet 1'
            type: 'String'
          ADServer2NetBIOSName:
            default: 'DC2'
            description: 'NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)'
            type: 'String'
          ADServer2PrivateIP:
            default: '10.0.32.11'
            description: 'Fixed private IP for the second additional Active Directory Domain Controller located in subnet 2'
            type: 'String'
          ADAdminSecParamName:
            description:
              'ARN for the Administrator credentials Secret used to join and promote domain controllers (Only used if JoinAndPromote is Yes)'
            type: 'String'
          RestoreModeSecParamName:
            description:
              'ARN for the Restore Mode credentials Secret used to join and promote domain controllers (Only used if JoinAndPromote is Yes)'
            type: 'String'
          ExistingDomainController1IP:
            description: 'IP of DNS server that can resolve domain (Must be accessible)'
            type: 'String'
          DomainDNSName:
            default: 'example.com'
            description: 'Fully qualified domain name (FQDN) of the domain you would like to join and promote to e.g. example.com'
            type: 'String'
          DomainNetBIOSName:
            default: 'example'
            description:
              'NetBIOS name of the domain (up to 15 characters) you would like to join and promote to for users of earlier versions of Windows e.g.
              EXAMPLE'
            type: 'String'
          QSS3BucketName:
            default: 'aws-quickstart'
            description:
              'S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and
              hyphens (-). It cannot start or end with a hyphen (-)'
            type: 'String'
          QSS3BucketRegion:
            default: 'us-east-1'
            description:
              'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value'
            type: 'String'
          QSS3KeyPrefix:
            default: 'quickstart-microsoft-activedirectory/'
            description:
              'S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens
              (-), and forward slash (/)'
            type: 'String'
          StackName:
            default: ''
            description: 'Stack Name Input for cfn resource signal'
            type: 'String'
          URLSuffix:
            default: 'amazonaws.com'
            description: 'AWS URL suffix'
            type: 'String'
        mainSteps:
          # This step grabs the Instance IDs for both nodes that will be configured as DCs in the Quick Start and Instance IDs for the for next steps.
          - name: 'dcsInstanceIds'
            action: aws:executeAwsApi
            onFailure: 'step:signalfailure'
            nextStep: 'dc1InstanceId'
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Name'
                  Values: ['{{ADServer1NetBIOSName}}', '{{ADServer2NetBIOSName}}']
                - Name: 'tag:aws:cloudformation:stack-name'
                  Values: ['{{StackName}}']
                - Name: 'instance-state-name'
                  Values: ['running']
            outputs:
              - Name: InstanceIds
                Selector: '$.Reservations..Instances..InstanceId'
                Type: 'StringList'
          # This step grabs the Instance ID for the node that will be configured as the first DC in the new domain.
          - name: 'dc1InstanceId'
            action: aws:executeAwsApi
            onFailure: 'step:signalfailure'
            nextStep: 'dc2InstanceId'
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Name'
                  Values: ['{{ADServer1NetBIOSName}}']
                - Name: 'tag:aws:cloudformation:stack-name'
                  Values: ['{{StackName}}']
                - Name: 'instance-state-name'
                  Values: ['running']
            outputs:
              - Name: InstanceId
                Selector: '$.Reservations[0].Instances[0].InstanceId'
                Type: 'String'
          # This step grabs the Instance ID for the node that will be configured as the second DC in the new domain.
          - name: 'dc2InstanceId'
            action: aws:executeAwsApi
            onFailure: 'step:signalfailure'
            nextStep: 'dcsInstallDscModules'
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: 'tag:Name'
                  Values: ['{{ADServer2NetBIOSName}}']
                - Name: 'tag:aws:cloudformation:stack-name'
                  Values: ['{{StackName}}']
                - Name: 'instance-state-name'
                  Values: ['running']
            outputs:
              - Name: InstanceId
                Selector: '$.Reservations[0].Instances[0].InstanceId'
                Type: 'String'
          # Installs needed Powershell DSC Modules and components on both nodes.
          - name: 'dcsInstallDscModules'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dcsLCMConfig'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dcsInstanceIds.InstanceIds}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/install-ad-modules.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine: './install-ad-modules.ps1'
          # Configures Local Configuration Manager on each of the nodes.
          - name: 'dcsLCMConfig'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dc1createDCMof'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dcsInstanceIds.InstanceIds}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/LCM-Config.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine: './LCM-Config.ps1'
          # Generates MOF file on second DC Node to be processed by LCM.
          - name: 'dc1createDCMof'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dc1configDC'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dc1InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/ConfigDC2.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine:
                  './ConfigDC2.ps1 -ADServer2NetBIOSName {{ADServer1NetBIOSName}} -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName
                  {{DomainDNSName}} -ADServer1PrivateIP {{ExistingDomainController1IP}} -ADAdminSecParam {{ADAdminSecParamName}} -RestoreModeSecParam
                  {{RestoreModeSecParamName}}'
          # Kicks off DSC Configuration and loops\reboots until Node matches Configuration defined in MOF file.
          - name: 'dc1configDC'
            action: aws:runCommand
            onFailure: 'step:signalfailure'
            nextStep: 'dc2createDCMof'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{dc1InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                commands:
                  - |
                    function DscStatusCheck () {
                        $LCMState = (Get-DscLocalConfigurationManager).LCMState
                        if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                            'returning 3010, should continue after reboot'
                            exit 3010
                        } else {
                            'Completed'
                        }
                    }

                    Start-DscConfiguration 'C:\AWSQuickstart\ConfigDC2' -Wait -Verbose -Force

                    DscStatusCheck
          # Generates MOF file on second DC Node to be processed by LCM.
          - name: 'dc2createDCMof'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'dc2configDC'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dc2InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: 'S3'
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/ConfigDC2.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine:
                  './ConfigDC2.ps1 -ADServer2NetBIOSName {{ADServer2NetBIOSName}} -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName
                  {{DomainDNSName}} -ADServer1PrivateIP {{ExistingDomainController1IP}} -ADAdminSecParam {{ADAdminSecParamName}} -RestoreModeSecParam
                  {{RestoreModeSecParamName}}'
          # Kicks off DSC Configuration and loops\reboots until Node matches Configuration defined in MOF file.
          - name: 'dc2configDC'
            action: aws:runCommand
            onFailure: 'step:signalfailure'
            nextStep: 'DnsConfig'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{dc2InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                commands:
                  - |
                    function DscStatusCheck () {
                        $LCMState = (Get-DscLocalConfigurationManager).LCMState
                        if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                            'returning 3010, should continue after reboot'
                            exit 3010
                        } else {
                            'Completed'
                        }
                    }

                    Start-DscConfiguration 'C:\AWSQuickstart\ConfigDC2' -Wait -Verbose -Force

                    DscStatusCheck
          # Ensure that AD servers point to themselves for DNS
          - name: 'DnsConfig'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            nextStep: 'PostConfig'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dc2InstanceId.InstanceId}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: S3
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/Dns-Config.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine:
                  './Dns-Config.ps1 -ADServer1NetBIOSName {{ADServer1NetBIOSName}} -ADServer2NetBIOSName {{ADServer2NetBIOSName}} -ADServer1PrivateIP
                  {{ADServer1PrivateIP}} -ADServer2PrivateIP {{ADServer2PrivateIP}} -DomainDNSName {{DomainDNSName}} -ADAdminSecParam
                  {{ADAdminSecParamName}}'
          # Cleanup and finalize setup
          - name: 'PostConfig'
            action: 'aws:runCommand'
            onFailure: 'step:signalfailure'
            inputs:
              DocumentName: 'AWS-RunRemoteScript'
              InstanceIds:
                - '{{dcsInstanceIds.InstanceIds}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: 'true'
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: S3
                sourceInfo: !Sub
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/AD2-Post-Config.ps1"}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                    S3Region: !If [UsingDefaultBucket, !Ref AWS::Region, !Ref QSS3BucketRegion]
                commandLine: './AD2-Post-Config.ps1 -VPCCIDR {{VPCCIDR}}'
          # Determines if CFN Needs to be Signaled or if Work flow should just end
          - name: 'CFNSignalEnd'
            action: aws:branch
            inputs:
              Choices:
                - NextStep: signalsuccess
                  Not:
                    Variable: '{{StackName}}'
                    StringEquals: ''
                - NextStep: sleepend
                  Variable: '{{StackName}}'
                  StringEquals: ''
          # If all steps complete successfully signals CFN of Success
          - name: 'signalsuccess'
            action: 'aws:executeAwsApi'
            isEnd: True
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: 'DomainController2Promote'
              StackName: '{{StackName}}'
              Status: SUCCESS
              UniqueId: '{{dc2InstanceId.InstanceId}}'
          # If CFN Signl Not Needed this sleep ends work flow
          - name: 'sleepend'
            action: 'aws:sleep'
            isEnd: True
            inputs:
              Duration: PT1S
          # If any steps fails signals CFN of Failure
          - name: 'signalfailure'
            action: 'aws:executeAwsApi'
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: 'DomainController2Promote'
              StackName: '{{StackName}}'
              Status: FAILURE
              UniqueId: '{{dc2InstanceId.InstanceId}}'
  ADServerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::aws-ssm-${AWS::Region}/*
                  - !Sub arn:${AWS::Partition}:s3:::aws-windows-downloads-${AWS::Region}/*
                  - !Sub arn:${AWS::Partition}:s3:::amazon-ssm-${AWS::Region}/*
                  - !Sub arn:${AWS::Partition}:s3:::amazon-ssm-packages-${AWS::Region}/*
                  - !Sub arn:${AWS::Partition}:s3:::${AWS::Region}-birdwatcher-prod/*
                  - !Sub arn:${AWS::Partition}:s3:::patch-baseline-snapshot-${AWS::Region}/*
                  - !Sub arn:${AWS::Partition}:s3:::aws-ssm-distributor-file-${AWS::Region}/*
                  - !Sub arn:${AWS::Partition}:s3:::aws-ssm-document-attachments-${AWS::Region}/*
          PolicyName: SSMAgent
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub
                  - 'arn:${AWS::Partition}:s3:::${S3Bucket}'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub
                  - 'arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*'
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              - Effect: Allow
                Action: ssm:StartAutomationExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${AWSQuickstartActiveDirectoryDS}:$DEFAULT
                  - !If
                    - DoJoinAndPromote
                    - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${AWSQuickstartActiveDirectoryDSPromote}:$DEFAULT
                    - !Ref AWS::NoValue
              - Effect: Allow
                Action: ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunRemoteScript
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunPowerShellScript
              - Effect: Allow
                Action: ssm:SendCommand
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                Condition:
                  StringEquals:
                    'ssm:ResourceTag/aws:cloudformation:stack-name': !Ref AWS::StackName
              - Sid: ReadOperations
                Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ssm:DescribeInstanceInformation
                  - ssm:ListCommands
                  - ssm:ListCommandInvocations
                Resource: '*'
              - Effect: Allow
                Action: cloudformation:SignalResource
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
          PolicyName: AWS-Mgmt-Quick-Start-Policy
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
  ADServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'ADServerRole'
      Path: /
  SecretRolePolicy:
    Condition: DoJoinAndPromote
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWS-Mgd-AD-Secret-Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource:
              - !Ref 'AdministratorSecret'
              - !Ref 'RestoreModeSecret'
      Roles:
        - !Ref 'ADServerRole'
  DomainControllersSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Controllers Security Group
      VpcId: !Ref 'VPCID'
      Tags:
        - Key: Name
          Value: DomainControllersSecurityGroup
  DomainController1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'LatestAmiId'
      IamInstanceProfile: !Ref 'ADServerProfile'
      InstanceType: !Ref 'ADServerInstanceType'
      SubnetId: !Ref 'Subnet1ID'
      Tags:
        - Key: Name
          Value: !Ref 'ADServer1NetBIOSName'
        - Key: Domain
          Value: !Ref 'DomainDNSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref 'DataDriveSizeGiB'
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref 'DomainControllersSG'
      PrivateIpAddress: !Ref 'ADServer1PrivateIP'
      KeyName: !Ref 'KeyPairName'
  DomainController2:
    Condition: DoNOTJoinAndPromote
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: DomainController1
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'LatestAmiId'
      IamInstanceProfile: !Ref 'ADServerProfile'
      InstanceType: !Ref 'ADServerInstanceType'
      SubnetId: !Ref 'Subnet2ID'
      Tags:
        - Key: Name
          Value: !Ref 'ADServer2NetBIOSName'
        - Key: Domain
          Value: !Ref 'DomainDNSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref 'DataDriveSizeGiB'
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref 'DomainControllersSG'
      PrivateIpAddress: !Ref 'ADServer2PrivateIP'
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - 'Start-SSMAutomationExecution -DocumentName '
            - !Sub '"${AWSQuickstartActiveDirectoryDS}"'
            - ' -Parameter @{'
            - '"VPCCIDR"='
            - !Sub '"${VPCCIDR}"'
            - ';"ADServer1NetBIOSName"='
            - !Sub '"${ADServer1NetBIOSName}"'
            - ';"ADServer2NetBIOSName"='
            - !Sub '"${ADServer2NetBIOSName}"'
            - ';"ExistingDomainController1IP"='
            - !Sub '"${ExistingDomainController1IP}"'
            - ';"ExistingDomainController2IP"='
            - !Sub '"${ExistingDomainController2IP}"'
            - ';"DomainDNSName"='
            - !Sub '"${DomainDNSName}"'
            - ';"DomainNetBIOSName"='
            - !Sub '"${DomainNetBIOSName}"'
            - ';"QSS3BucketName"='
            - !If [UsingDefaultBucket, !Sub '"${QSS3BucketName}-${AWS::Region}"', !Sub '"${QSS3BucketName}"']
            - ';"QSS3BucketRegion"='
            - !If [UsingDefaultBucket, !Sub '"${AWS::Region}"', !Sub '"${QSS3BucketRegion}"']
            - ';"QSS3KeyPrefix"='
            - !Sub '"${QSS3KeyPrefix}"'
            - ';"StackName"='
            - !Sub '"${AWS::StackName}"'
            - ';"URLSuffix"='
            - !Sub '"${AWS::URLSuffix}"'
            - '}'
            - "\n"
            - "</powershell>\n"
  DomainController2Promote:
    Condition: DoJoinAndPromote
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: DomainController1
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'LatestAmiId'
      IamInstanceProfile: !Ref 'ADServerProfile'
      InstanceType: !Ref 'ADServerInstanceType'
      SubnetId: !Ref 'Subnet2ID'
      Tags:
        - Key: Name
          Value: !Ref 'ADServer2NetBIOSName'
        - Key: Domain
          Value: !Ref 'DomainDNSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref 'DataDriveSizeGiB'
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref 'DomainControllersSG'
      PrivateIpAddress: !Ref 'ADServer2PrivateIP'
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - 'Start-SSMAutomationExecution -DocumentName '
            - !Sub '"${AWSQuickstartActiveDirectoryDSPromote}"'
            - ' -Parameter @{'
            - '"VPCCIDR"='
            - !Sub '"${VPCCIDR}"'
            - ';"ADServer1NetBIOSName"='
            - !Sub '"${ADServer1NetBIOSName}"'
            - ';"ADServer1PrivateIP"='
            - !Sub '"${ADServer1PrivateIP}"'
            - ';"ADServer2NetBIOSName"='
            - !Sub '"${ADServer2NetBIOSName}"'
            - ';"ADServer2PrivateIP"='
            - !Sub '"${ADServer2PrivateIP}"'
            - ';"ADAdminSecParamName"='
            - !Sub '"${AdministratorSecret}"'
            - ';"RestoreModeSecParamName"='
            - !Sub '"${RestoreModeSecret}"'
            - ';"ExistingDomainController1IP"='
            - !Sub '"${ExistingDomainController1IP}"'
            - ';"DomainDNSName"='
            - !Sub '"${DomainDNSName}"'
            - ';"DomainNetBIOSName"='
            - !Sub '"${DomainNetBIOSName}"'
            - ';"QSS3BucketName"='
            - !If [UsingDefaultBucket, !Sub '"${QSS3BucketName}-${AWS::Region}"', !Sub '"${QSS3BucketName}"']
            - ';"QSS3BucketRegion"='
            - !If [UsingDefaultBucket, !Sub '"${AWS::Region}"', !Sub '"${QSS3BucketRegion}"']
            - ';"QSS3KeyPrefix"='
            - !Sub '"${QSS3KeyPrefix}"'
            - ';"StackName"='
            - !Sub '"${AWS::StackName}"'
            - ';"URLSuffix"='
            - !Sub '"${AWS::URLSuffix}"'
            - '}'
            - "\n"
            - "</powershell>\n"
Outputs:
  DC1InstanceId:
    Value: !Ref 'DomainController1'
    Description: Domain Controller instance ID